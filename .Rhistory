}
means <- aggregate(. ~ label, data = mergedData, mean)
head(means)
means <- aggregate(. ~ label, data = mergedData[1:561], mean)
means <- aggregate(. ~ label, data = mergedData[,1:561], mean)
means <- aggregate(. ~ label, data = mergedData[,1:562], mean)
head(means)
test <- cbind(testSet, testLabel)
train <- cbind(trainSet,trainLabel)
means <- aggregate(. ~ label, data = mergedData, mean)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
print (x)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(inv)
inv
}
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
b <- makeVector(1:100000)
cachemean(b)
m <- makeCacheMatrix(1:10000)
cacheSolve(m)
m <- makeCacheMatrix(1:100)
m <- makeCacheMatrix(x)
cacheSolve(m)
m <- makeCacheMatrix(1:25)
cacheSolve(m)
m <- makeCacheMatrix(25)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- matrix(y)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
print (x)
}
m <- makeCacheMatrix(1:25)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y,z) {
x <<- matrix(y,z)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
print (x)
}
m <- makeCacheMatrix(5,5)
cacheSolve(m)
?matrix
as.matrix(1:10)
m <- makeCacheMatrix(1:25)
cacheSolve(m)
makeCacheMatrix <- function(x = as.matrix()) {
inv <- NULL
set <- function(y) {
x <<- as.matrix(y)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
print (x)
}
m <- makeCacheMatrix(1:25)
b <- makeVector(1:100000)
b <- makeVector(1:10)
b
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
print (x)
}
b <- makeVector(1:10)
cachemean(b)
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
m <- makeCacheMatrix(v)
cacheSolve(m)
cachemean(b)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
b <- makeVector(1:10)
cachemean(b)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- as.matrix(y)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m <- makeCacheMatrix(v)
cacheSolve(m)
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y,m,n) {
x <<- as.matrix(y,m,n)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m <- makeCacheMatrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
m <- makeCacheMatrix(v,4,4)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y, nrow, ncol) {
x <<- as.matrix(y,nrow,ncol)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m <- makeCacheMatrix(v,4,4)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- as.matrix(y)
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
means <- aggregate(. ~ label, data = mergedData, mean)
dim(means)
dim(mergedData)
x <- t(means)
head(t)
x <- t(means)
x
head(x)
t?
x <- t(means, header=T)
x <- t(means)
head(x)
?transpose
?t
x <- t(as.matrix(means, dimnames =2))
head(x)
head(mergedData)
dim(mergedData)
trainSubjectUrl <- "./UCI HAR Dataset/train/subject_train.txt"
trainSubject <- read.table(trainSubjectUrl, header=F)
train <- cbind(trainSet,trainLabel, trainSubject)
head(train)
testSubject <- read.table(testSubjectUrl, header=F)
testSubjectUrl <- "./UCI HAR Dataset/test/subject_test.txt"
testSubject <- read.table(testSubjectUrl, header=F)
test <- cbind(testSet, testLabel, testSubject)
mergedData <-rbind(train,test)
colnames(mergedData)[562] <- "Label"
colnames(mergedData)[563] <- "Subject"
allLabels <- c("walking", "walking upstairs", "walking downstairs",
"sitting", "standing", "laying")
for (i in 1:6){
mergedData$label[mergedData$label== i] <- allLabels[i]
}
for (i in 1:6){
mergedData$Label[mergedData$Label== i] <- allLabels[i]
}
means <- aggregate(. ~ label, data = mergedData, mean)
means <- aggregate(. ~ Label, data = mergedData, mean)
head(means)
dim(means)
means <- aggregate(. ~ c(Label,Subject), data = mergedData, mean)
?aggregate
means <- aggregate(. ~ (Label,Subject), data = mergedData, mean)
means <- aggregate(. ~ Label & Subject, data = mergedData, mean)
means <- aggregate(. ~ Label + Subject, data = mergedData, mean)
head(means)
dim(means)
means[,1:3]
means <- aggregate(Subject ~ Label, data = mergedData, mean)
dim(means)
means
aggregate(weight ~ feed, data = chickwts, mean)
head(chickwts)
aggregate(cbind(Ozone, Temp) ~ Month, data = airquality, mean)
head(airquality)
means <- aggregate(. ~ Label+Subject, data = mergedData, mean)
featuresUrl <- "./UCI HAR Dataset/features.txt"
colnames(mergedData)[1:561] <- featuresUrl
head(mergedData)
features <- read.table(featuresUrl, header=F)
colnames(mergedData)[1:561] <- features
head(features)
colnames(mergedData)[1:561] <- features[V2]
colnames(mergedData)[1:561] <- features$V2
head(mergedData)
features$V2
trainSet <- colnames(trainSet) <- features$V2
head(trainSet)
View(testSet)
View(testSet)
View(testSet)
trainSet <- read.table(trainSetUrl, header=F)
head(trainSet)
colnames(trainSet) <- features$V2
head(trainSet)
colnames(testSet) <- features$V2
trainSetUrl <- "./UCI HAR Dataset/train/X_train.txt"
trainLabelUrl <- "./UCI HAR Dataset/train/y_train.txt"
trainSubjectUrl <- "./UCI HAR Dataset/train/subject_train.txt"
testSetUrl <- "./UCI HAR Dataset/test/X_test.txt"
testLabelUrl <- "./UCI HAR Dataset/test/y_test.txt"
testSubjectUrl <- "./UCI HAR Dataset/test/subject_test.txt"
featuresUrl <- "./UCI HAR Dataset/features.txt"
features <- read.table(featuresUrl, header=F)
trainSet <- read.table(trainSetUrl, header=F)
colnames(trainSet) <- features$V2
trainLabel <- read.table(trainLabelUrl, header=F)
trainSubject <- read.table(trainSubjectUrl, header=F)
train <- cbind(trainSet,trainLabel, trainSubject)
testSet <- read.table(testSetUrl, header=F)
colnames(testSet) <- features$V2
testLabel <- read.table(testLabelUrl, header=F)
testSubject <- read.table(testSubjectUrl, header=F)
test <- cbind(testSet, testLabel, testSubject)
mergedData <-rbind(train,test)
colnames(mergedData)[562] <- "Label"
colnames(mergedData)[563] <- "Subject"
allLabels <- c("walking", "walking upstairs", "walking downstairs",
"sitting", "standing", "laying")
for (i in 1:6){
mergedData$Label[mergedData$Label== i] <- allLabels[i]
}
means <- aggregate(. ~ Label+Subject, data = mergedData, mean)
head(means)
head(mergedData)
dim(means)
dim(mergedData)
features$V2
?grep(mean)
grep("[Mm]ean", features$V2)
grep(".[Mm]ean", features$V2)
grep("*[Mm]ean", features$V2)
grep("+[Mm]ean", features$V2)
grep(*"[Mm]ean", features$V2)
grep("(.*)[Mm]ean", features$V2)
features$V2
grep("(.*)[Mm]ean | (.*)std", features$V2)
grep("(.*)[Mm]ean|std", features$V2)
grep("(.*)[Mm]ean", features$V2)
grep("(.*)std", features$V2)
grep("[Mm]ean", features$V2)
grep("mean", features$V2)
grep("mean | std", features$V2)
grep("mean|std", features$V2)
grep("std", features$V2)
grep("mean()", features$V2)
grep("std()", features$V2)
grep("mean()|std()", features$V2)
grep("mean()$|std()$", features$V2)
grep("mean()$", features$V2)
grep("mean()"$, features$V2)
grep("mean()$", features$V2)
?trim
trim.trailing <- function (x) sub("\\s+$", "", x)
colnames(testSet) <- trim(features$V2)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
colnames(testSet) <- trim(features$V2)
(
colnames(testSet) <- trim(features$V2)
)
grep("mean()$|std()$", trim(features$V2))
grep("mean()$", trim(features$V2))
grep("mean()", trim(features$V2))
grep("mean()-", trim(features$V2))
grep("mean()-", features$V2)
grep("mean()\-", features$V2)
grep("mean()|std()", features$V2)
?grep
grep("mean()|std()", features$V2, value=TRUE)
grep("mean()?|std()?", features$V2)
grep("mean()?|std()?", features$V2, value=TRUE)
grep("mean()|std()", features$V2, value=TRUE, fixed = TRUE)
gsub("mean()|std()", features$V2, value=TRUE)
gsub("mean()|std()", features$V2)
regexpr("mean()|std()", features$V2, value=TRUE)
regexpr("mean()|std()", features$V2)
grep("mean()?|std()?", features$V2, value=TRUEE)
grep("mean?()|std?()", features$V2, value=TRUE)
gsub("mean()|std()", features$V2)
grep("mean()|std()", features$V2, value=TRUE, fixed = FALSE)
grep("mean()|std()", features$V2, value=TRUE, fixed = TRUE)
grep("mean()|std()", features$V2, value=TRUE)
grep("(mean())|(std())", features$V2, value=TRUE)
grep("(mean()|std())", features$V2, value=TRUE)
grep("mean\(\)|std()", features$V2, value=TRUE)
grep("mean\(\)|std\(\)", features$V2, value=TRUE)
grep("mean\(\)", features$V2, value=TRUE)
grep("mean\\(\\)", features$V2, value=TRUE)
grep("mean\\(\\)|std\\(\\)", features$V2, value=TRUE)
extractedFeatures <- grep("mean\\(\\)|std\\(\\)", features$V2, value=TRUE)
extractedColumns <- grep("mean\\(\\)|std\\(\\)", features$V2, value=TRUE)
extractedColumns <- grep("mean\\(\\)|std\\(\\)", features$V2)
extractedColumns
extractedValues <- mergedData[extractedColumns]
head(extractedValues)
tidySet <- aggregate(. ~ Label+Subject, data = extractedValues, mean)
extractedValues <- mergedData[c(extractedColumns, 561,562]
extractedValues <- mergedData[c(extractedColumns, 561,562)]
head(extractedValues)
extractedValues <- mergedData[c(extractedColumns, 562,563)]
head(extractedValues)
tidySet <- aggregate(. ~ Label+Subject, data = extractedValues, mean)
dim(tidySet)
head(tidySet)
tidySet <- aggregate(. ~ Label+Subject, data = extractedValues, mean)
head(tidySet)
tail(tidySet)
write.csv(means, file="tidySet.csv", row.names=FALSE)
write.table(means, file="tidySet.txt", row.names=FALSE)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- as.matrix(v,4,4)
m <- makeCacheMatrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(m)
q
cacheSolve(m)
m <- makeCacheMatrix(x)
m
x
x <- as.matrix(v,4,4)
x
x <- matrix(v,4,4)
x
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
v <- c(2,3, 1, 5, 1, 0, 3, 1, 0, 2, -3, 2, 0, 2, 3, 1)
x <- matrix(v,4,4)
m <- makeCacheMatrix(x)
cacheSolve(m)
library(datasets)
data(iris)
mean(iris$Sepal.Length)
apply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris, 2, mean)
sapply(iris, 2, mean)
?apply
?sapply
apply(iris$Sepal.Length, 2, mean)
length(iris$Sepal.Length)
head(iris)
apply(iris, 2, mean)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
apply(x, 2, mean)
apply(x, 2, mean, trim = .2)
library(datasets)
apply(iris, 2, mean)
?class
class(iris$Sepal.Length)
head(iris)
apply(iris[1:5], 2, mean)
apply(iris[1:4], 2, mean)
